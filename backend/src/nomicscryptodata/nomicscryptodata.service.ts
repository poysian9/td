import { HttpService } from '@nestjs/axios';
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { InjectModel } from '@nestjs/mongoose';
import { Cron, CronExpression } from '@nestjs/schedule';
import { Model } from 'mongoose';
import { lastValueFrom, map, Observable } from 'rxjs';
import { CsvService } from 'src/csv/csv.service';
import { CSV, CSVDocument } from 'src/csv/schema/csv.schema';
import { NomicsCryptoDataDto } from './dto/nomics.dto';
import {
  NomicsCryptoData,
  NomicsCryptoDataDocument,
} from './schema/nomicscryptodata.schema';

const allAssets = [
  'MPH2',
  'APY',
  'APTOS',
  'BID',
  'DOSNETWORK',
  'IOT',
  'KIN',
  'MCB',
  'NEBL',
  'PAID',
  'PRQ',
  'PLR',
  'QLC',
  'SHR',
  'SHIB',
  'SPI',
  'XOR',
  'SRK',
  'CHSB',
  'TRUSTSWAP',
  'ZRX',
  '1INCH',
  'AAVE',
  'ELF',
  'AERGO',
  'AION',
  'AST',
  'AKRO',
  'ALGO',
  'TLM2',
  'ALPHA7',
  'ADX',
  'AMP2',
  'ANKR',
  'APE7',
  'API3',
  'ARDR',
  'ARK',
  'AR',
  'AUDIO',
  'REP',
  'AURY',
  'AVAX',
  'AXS2',
  'BADGER',
  'BAL',
  'BNT',
  'BAND',
  'BAT',
  'BEL',
  'BICO',
  'BNB',
  'BUSD',
  'BTC',
  'BCH',
  'BTS',
  'BTT2',
  'BOBA',
  'ADA',
  'CTSI',
  'CELR',
  'CELO',
  'CEL',
  'LINK',
  'CHZ',
  'CVC',
  'COMP',
  'COS',
  'CVX',
  'ATOM',
  'COTI',
  'CQT',
  'CRPT',
  'CRO',
  'CRV',
  'DAI',
  'RING',
  'MANA',
  'DENT',
  'DEXT2',
  'YFII',
  'DIA',
  'DGB',
  'DNT',
  'DODO',
  'DOGE',
  'DYDX',
  'EGLD',
  'EWT',
  'ENJ',
  'MLN',
  'EOS',
  'ETH',
  'ETC',
  'ENS',
  'ERN2',
  'FTM',
  'FET',
  'FIL',
  'FLM',
  'FLOW2',
  'FXS',
  'FRONT',
  'FTT',
  'FUN',
  'GALA',
  'GAS',
  'GUSD',
  'GITCOIN',
  'GNO',
  'GLM',
  'HARMONY',
  'HBAR',
  'HELIUM',
  'MFT',
  'HIVE2',
  'HOT',
  'HT',
  'ICX',
  'IDEX',
  'RLC',
  'ILV',
  'IMX3',
  'INJ',
  'ICP',
  'IOST',
  'IOTX',
  'IRIS',
  'KAVA',
  'ROOK2',
  'KSM',
  'KNC3',
  'LCX',
  'LEVER',
  'LDO',
  'LSK',
  'LTC',
  'LPT',
  'LOOM',
  'LRC',
  'LTO',
  'LYXE',
  'MKR',
  'OM',
  'POND',
  'MDX2',
  'MTA',
  'MTL',
  'MINA',
  'MITH',
  'GLMR',
  'MOVR',
  'ALICE',
  'NANO',
  'NEAR',
  'XEM',
  'NEO',
  'CKB',
  'NEST',
  'NKN',
  'NULS',
  'NMR',
  'OCEAN',
  'OMG',
  'ONT',
  'ONTGAS',
  'OOKI',
  'OXT',
  'OGN',
  'TRAC',
  'ORN',
  'CAKE',
  'PERL',
  'DOT',
  'MATIC',
  'POWR',
  'PUNDIX',
  'QTUM',
  'QNT',
  'QSP',
  'QKC',
  'RVN',
  'RAY',
  'RFOX',
  'REEF',
  'REN',
  'RNDR',
  'REQ',
  'RSR3',
  'REVV',
  'RPL',
  'KEY',
  'SRM',
  'SC',
  'AGIX',
  'SKL',
  'SLP',
  'SOL',
  'SPELL',
  'SSV',
  'BLOCKSTACK',
  'ATLAS',
  'POLIS2',
  'SNT',
  'XLM',
  'GMT7',
  'STORJ',
  'STMX',
  'STRAX',
  'DATA',
  'SUPER2',
  'RARE',
  'SUSHI',
  'SXP',
  'CHF',
  'SNX',
  'TEL',
  'TRB',
  'TVK',
  'USDT',
  'XTZ',
  'TFUEL',
  'GRT',
  'SAND2',
  'THETA',
  'RUNE',
  'TOMO',
  'AVA',
  'TRX',
  'TRU',
  'TUSD',
  'UOS',
  'UMA',
  'UBT',
  'UNFI',
  'UNI',
  'USD',
  'USDC',
  'UTK',
  'VET',
  'XVS',
  'VRA',
  'VTHO',
  'VIDT',
  'VGX',
  'WTC',
  'WAN',
  'WAVES',
  'WAXP',
  'WRX',
  'WETH',
  'WINK',
  'WOO',
  'WBTC',
  'XDCE',
  'XRP',
  'XYO',
  'YFI',
  'ZIL',
  'MPH2',
  'APY',
  'BID',
  'DOSNETWORK',
  'IOT',
  'KIN',
  'MCB',
  'NEBL',
  'PAID',
  'PRQ',
  'PLR',
  'QLC',
  'SHR',
  'SHIB',
  'SPI',
  'XOR',
  'SRK',
  'CHSB',
  'TRUSTSWAP',
  'ZRX',
  '1INCH',
  'AAVE',
  'ELF',
  'AERGO',
  'AION',
  'AST',
  'AKRO',
  'ALGO',
  'TLM2',
  'ALPHA7',
  'ADX',
  'AMP2',
  'ANKR',
  'APE7',
  'API3',
  'ARDR',
  'ARK',
  'AR',
  'AUDIO',
  'REP',
  'AURY',
  'AVAX',
  'AXS2',
  'BADGER',
  'BAL',
  'BNT',
  'BAND',
  'BAT',
  'BEL',
  'BICO',
  'BNB',
  'BUSD',
  'BTC',
  'BCH',
  'BTS',
  'BTT2',
  'BOBA',
  'ADA',
  'CTSI',
  'CELR',
  'CELO',
  'CEL',
  'LINK',
  'CHZ',
  'CVC',
  'COMP',
  'COS',
  'CVX',
  'ATOM',
  'COTI',
  'CQT',
  'CRPT',
  'CRO',
  'CRV',
  'DAI',
  'RING',
  'MANA',
  'DENT',
  'DEXT2',
  'YFII',
  'DIA',
  'DGB',
  'DNT',
  'DODO',
  'DOGE',
  'DYDX',
  'EGLD',
  'EWT',
  'ENJ',
  'MLN',
  'EOS',
  'ETH',
  'ETC',
  'ENS',
  'ERN2',
  'FTM',
  'FET',
  'FIL',
  'FLM',
  'FLOW2',
  'FXS',
  'FRONT',
  'FTT',
  'FUN',
  'GALA',
  'GAS',
  'GUSD',
  'GITCOIN',
  'GNO',
  'GLM',
  'HARMONY',
  'HBAR',
  'HELIUM',
  'MFT',
  'HIVE2',
  'HOT',
  'HT',
  'ICX',
  'IDEX',
  'RLC',
  'ILV',
  'IMX3',
  'INJ',
  'ICP',
  'IOST',
  'IOTX',
  'IRIS',
  'KAVA',
  'ROOK2',
  'KSM',
  'KNC3',
  'LCX',
  'LEVER',
  'LDO',
  'LSK',
  'LTC',
  'LPT',
  'LOOM',
  'LRC',
  'LTO',
  'LYXE',
  'MKR',
  'OM',
  'POND',
  'MDX2',
  'MTA',
  'MTL',
  'MINA',
  'MITH',
  'GLMR',
  'MOVR',
  'ALICE',
  'NANO',
  'NEAR',
  'XEM',
  'NEO',
  'CKB',
  'NEST',
  'NKN',
  'NULS',
  'NMR',
  'OCEAN',
  'OMG',
  'ONT',
  'ONTGAS',
  'OOKI',
  'OXT',
  'OGN',
  'TRAC',
  'ORN',
  'CAKE',
  'PERL',
  'DOT',
  'MATIC',
  'POWR',
  'PUNDIX',
  'QTUM',
  'QNT',
  'QSP',
  'QKC',
  'RVN',
  'RAY',
  'RFOX',
  'REEF',
  'REN',
  'RNDR',
  'REQ',
  'RSR3',
  'REVV',
  'RPL',
  'KEY',
  'SRM',
  'SC',
  'AGIX',
  'SKL',
  'SLP',
  'SOL',
  'SPELL',
  'SSV',
  'BLOCKSTACK',
  'ATLAS',
  'POLIS2',
  'SNT',
  'XLM',
  'GMT7',
  'STORJ',
  'STMX',
  'STRAX',
  'DATA',
  'SUPER2',
  'RARE',
  'SUSHI',
  'SXP',
  'CHF',
  'SNX',
  'TEL',
  'TRB',
  'TVK',
  'USDT',
  'XTZ',
  'TFUEL',
  'GRT',
  'SAND2',
  'THETA',
  'RUNE',
  'TOMO',
  'AVA',
  'TRX',
  'TRU',
  'TUSD',
  'UOS',
  'UMA',
  'UBT',
  'UNFI',
  'UNI',
  'USD',
  'USDC',
  'UTK',
  'VET',
  'XVS',
  'VRA',
  'VTHO',
  'VIDT',
  'VGX',
  'WTC',
  'WAN',
  'WAVES',
  'WAXP',
  'WRX',
  'WETH',
  'WINK',
  'WOO',
  'WBTC',
  'XDCE',
  'XRP',
  'XYO',
  'YFI',
  'ZIL',
  'ZERO',
  'ABYSS2',
  'ADB',
  'ADXOLD',
  'AEON',
  'AE',
  'AGRI',
  'AMPL',
  'ANT',
  'AURA',
  'AXPR',
  'BEAM',
  'BCHA',
  'BTCP',
  'BDG',
  'TUBE',
  'BLOCK',
  'CDT',
  'BURST',
  'BCN',
  'CAN',
  'CAPP',
  'CARD',
  'CAS',
  'POLL',
  'CLOAK',
  'COV',
  'CS',
  'C20',
  'PUNK2',
  'DASH',
  'DEB',
  'DCR',
  'DBC',
  'DGTX',
  'DGD',
  'DIG2',
  'DMG',
  'WOZX',
  'ELEC',
  'ETN',
  'ERD',
  'NRG',
  'ENG',
  'ERC20',
  'ETHOS',
  'XUC',
  'FCT',
  'FOAM',
  'FSN',
  'GTO',
  'GNT',
  'GRIN',
  'GRS',
  'HNS',
  'THC',
  'HIT',
  'ZEN',
  'HST',
  'HTML',
  'HXRO',
  'HYDRO',
  'HC',
  'HYN',
  'HDAC',
  'KDA',
  'KEEP',
  'KMD',
  'ERC-20 THETA',
  'HYDROOLD',
  'KCSOLD',
  'LTO_OLD',
  'PAID_OLD',
  'LCC',
  'LIT',
  'LOKI',
  'LOOM_OLD',
  'MED',
  'MEDX',
  'MET',
  'MONA',
  'XMR',
  'TKN',
  'MUSD',
  'NAV',
  'NCC',
  'NEXO',
  'NCASH',
  'OCN',
  'OLT',
  'OAX',
  'CHX',
  'PAL',
  'PAXG',
  'PAX',
  'PPP',
  'PCL3',
  'PPY',
  'PHNX',
  'PIVX',
  'OMX',
  'PRO',
  'QASH',
  'QUICK3',
  'RAMP',
  'RGT',
  'RARI',
  'RCHAIN',
  'PHX',
  'BERRY',
  'MWAT',
  'RCHAIN',
  'RUFF',
  'SALT',
  'UPP',
  'SNTVT',
  'SERV',
  'SETH',
  'SHIP',
  'SKM',
  'ONG',
  'SNM',
  'SXDT',
  'SHOPX',
  'SUB',
  'SWM',
  'ESH',
  'SWTH',
  'TAAS',
  'LUNA',
  'UST',
  'XAUT',
  'TDROP',
  'TAUD',
  'UFT',
  '1UP',
  'UQC',
  'VSYS',
  'XVG',
  'VTC',
  'VGX',
  'WABI',
  'WPR',
  'WXT',
  'WBI',
  'XDCE',
  'ZEC',
  'ZCL',
  'XZC',
  'ZCO',
];

@Injectable()
export class NomicsCryptoDataService {
  private NOMICS_API_KEY: string;

  constructor(
    private httpService: HttpService,
    private configService: ConfigService,
    private readonly csvService: CsvService,

    @InjectModel(CSV.name)
    private cryptoModel: Model<CSVDocument>,

    @InjectModel(NomicsCryptoData.name)
    private nomicsModel: Model<NomicsCryptoDataDocument>,
  ) {
    this.NOMICS_API_KEY = this.configService.get<string>('NOMICS_API_KEY');
  }

  formatNomics(rows: NomicsCryptoDataDto[]): NomicsCryptoData[] {
    return rows.map((x) => {
      const formatted = {
        name: x.name,
        circulating_supply: x.circulating_supply,
        max_supply: x.max_supply,
        price: x.price,
        currency: x.currency,
        high: x.high,
        high_timestamp: x.high_timestamp,
        id: x.id,
        logo_url: x.logo_url,
        market_cap: x.market_cap,
        market_cap_dominance: x.market_cap_dominance,
        rank: x.rank,
        symbol: x.symbol,
        price_date: x.price_date,
        onehour: x['1h'],
        oneday: x['1d'],
        sevenday: x['7d'],
        thirtyday: x['30d'],
        oneyear: x['365d'],
        ytd: x['ytd'],
      };

      return formatted;
    });
  }

  @Cron(CronExpression.EVERY_MINUTE)
  async updatenomicsdata() {
    const allDocs = await this.cryptoModel.find({}, ['nomicsid']).lean().exec();
    const allIds = allDocs.map((doc) => doc.nomicsid);
    const rows: Observable<NomicsCryptoDataDto[]> = this.httpService
      .get(
        `https://api.nomics.com/v1/currencies/ticker?key=${this.NOMICS_API_KEY}&ids=${allIds}&interval=1h,1d,7d,30d,365d,ytd`,
      )
      .pipe(map((response) => response.data));

    const formatted: NomicsCryptoData[] = this.formatNomics(
      await lastValueFrom(rows),
    );

    // return this.create(formatted);
    return this.upsert(formatted);
  }

  async updatefiatnomics(fiat: string) {
    const allDocs = await this.cryptoModel.find({}, ['nomicsid']).lean().exec();
    const allIds = allDocs.map((doc) => doc.nomicsid);
    const rows: Observable<NomicsCryptoDataDto[]> = this.httpService
      .get(
        `https://api.nomics.com/v1/currencies/ticker?key=${this.NOMICS_API_KEY}&ids=${allIds}&convert=${fiat}&interval=1h,1d,7d,30d,365d,ytd`,
      )
      .pipe(map((response) => response.data));

    const formatted: NomicsCryptoData[] = this.formatNomics(
      await lastValueFrom(rows),
    );
    return formatted;
  }

  async create(docs: NomicsCryptoData[]) {
    return await this.nomicsModel.insertMany(docs);
  }

  async upsert(docs: NomicsCryptoData[]) {
    return await this.nomicsModel.bulkWrite(
      docs.map((doc) => ({
        updateOne: {
          filter: {
            id: doc.id,
          },
          update: doc,
          upsert: true,
          setDefaultsOnInsert: true,
        },
      })) as any,
    );
  }

  async merge() {
    return await this.nomicsModel
      .aggregate([
        {
          $lookup: {
            from: 'database',
            localField: 'id',
            foreignField: 'nomicsid',
            as: 'coindata',
          },
        },
      ])
      .exec();
  }

  async readCurrency(id: string) {
    return await this.nomicsModel.findOne({ id }).lean().exec();
  }

  async biggestDailyGainer() {
    return await this.nomicsModel
      .aggregate([
        {
          $lookup: {
            from: 'database',
            localField: 'id',
            foreignField: 'nomicsid',
            as: 'coindata',
          },
        },
      ])
      .sort({ 'oneday.price_change_pct': 'desc' })
      .exec();
  }

  async biggestWeeklyGainer() {
    return await this.nomicsModel
      .aggregate([
        {
          $lookup: {
            from: 'database',
            localField: 'id',
            foreignField: 'nomicsid',
            as: 'coindata',
          },
        },
      ])
      .sort({ 'sevenday.price_change_pct': 'desc' })
      .exec();
  }

  async readAll() {
    return await this.nomicsModel.find().lean().exec();
  }
}
